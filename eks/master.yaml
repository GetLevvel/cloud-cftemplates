Description: EKS Cluster master template

Parameters:

  AppName:
    Description: Application the infrastructure belongs to
    Type: String
  
  EnvName:
    Description: Environment being deployed to
    Type: String

  VPC:
    Description: VPC to deploy to
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: Subnets to deploy the EC2 nodes to
    Type: List<AWS::EC2::Subnet::Id>
  
  BastionSecurityGroup:
    Description: Bastion security group to allow SSH tunneling from
    Type: AWS::EC2::SecurityGroup::Id

  S3BucketName:
    Description: The name of the S3 Bucket where nested template files are stored
    Type: String

  ClusterVersion:
    Description: Cluster Version
    Type: String
    Default: '1.11'

  ClusterName:
    Type: String
    Description: Name of the Cluster to deploy
 
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  NodeImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI id for the node instances
    Default: ami-0c24db5df6badc35a # https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t2.large

  ClusterSize:
    Type: Number
    Description: Size of each Node Group ASG.
    Default: 2

  NodeVolumeSize:
    Type: Number
    Description: Node volume size
    Default: 40

  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: ""
    Type: String

Resources:
  
  # EKS Cluster
  ClusterIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [eks.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for the Control Plane
      SecurityGroupIngress:
        # SSH Access
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
      Tags:
        - Key: Application
          Value: !Ref AppName
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: 'owned'
  
  NodeSecurityGroup:
    Type: AWS::CloudFormation::Stack
    DependsOn: ControlPlaneSecurityGroup
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.amazonaws.com/node-security-group.yaml'
      Parameters:
        AppName: !Ref AppName
        ClusterName: !Ref ClusterName
        BastionSecurityGroup: !Ref BastionSecurityGroup
        ControlPlaneSecurityGroup: !GetAtt ControlPlaneSecurityGroup.GroupId
        VPC: !Ref VPC

  EKSCluster:
    Type: AWS::EKS::Cluster
    DependsOn: NodeSecurityGroup # purely for ordering convenience
    Properties:
      Name: !Ref ClusterName
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt ClusterIamRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds: 
          - !GetAtt ControlPlaneSecurityGroup.GroupId
        SubnetIds: !Ref Subnets

  NodeGroup1:
    Type: AWS::CloudFormation::Stack
    DependsOn: 
      - NodeSecurityGroup
      - EKSCluster
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.amazonaws.com/worker-nodes.yaml'
      Parameters:
        AppName: !Ref AppName
        KeyName: !Ref KeyName
        NodeImageId: !Ref NodeImageId
        NodeInstanceType: !Ref NodeInstanceType
        MinSize: !Ref ClusterSize
        MaxSize: !Ref ClusterSize
        StorageSize: !Ref NodeVolumeSize
        BootstrapArguments: !Ref BootstrapArguments
        ClusterName: !Ref ClusterName
        NodeGroupName: !Sub "${AppName}-group-1"
        Subnets: !Join [ ',', !Ref Subnets]
        NodeSecurityGroup: !GetAtt NodeSecurityGroup.Outputs.NodeSecurityGroup

  NodeGroup2:
    Type: AWS::CloudFormation::Stack
    DependsOn: 
      - NodeSecurityGroup
      - EKSCluster
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.amazonaws.com/worker-nodes.yaml'
      Parameters:
        AppName: !Ref AppName
        KeyName: !Ref KeyName
        NodeImageId: !Ref NodeImageId
        NodeInstanceType: !Ref NodeInstanceType
        MinSize: !Ref ClusterSize
        MaxSize: !Ref ClusterSize
        StorageSize: !Ref NodeVolumeSize
        BootstrapArguments: !Ref BootstrapArguments
        ClusterName: !Ref ClusterName
        NodeGroupName: !Sub "${AppName}-group-2"
        Subnets: !Join [ ',', !Ref Subnets]
        NodeSecurityGroup: !GetAtt NodeSecurityGroup.Outputs.NodeSecurityGroup
