{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates a VPC and Windows Image to Simulate an on-premise environment",
    "Parameters": {
        "MasterStackName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "String",
        },
        "EC2Key": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        }
    },
    "Mappings": {
        "Region2Examples": {
            "us-east-1": {
                "Examples": "https://s3.amazonaws.com/cloudformation-examples-us-east-1"
            },
            "us-west-2": {
                "Examples": "https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2"
            },
            "us-west-1": {
                "Examples": "https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1"
            },
            "eu-west-1": {
                "Examples": "https://s3-eu-west-1.amazonaws.com/cloudformation-examples-eu-west-1"
            },
            "eu-west-2": {
                "Examples": "https://s3-eu-west-2.amazonaws.com/cloudformation-examples-eu-west-2"
            },
            "eu-west-3": {
                "Examples": "https://s3-eu-west-3.amazonaws.com/cloudformation-examples-eu-west-3"
            },
            "eu-central-1": {
                "Examples": "https://s3-eu-central-1.amazonaws.com/cloudformation-examples-eu-central-1"
            },
            "ap-southeast-1": {
                "Examples": "https://s3-ap-southeast-1.amazonaws.com/cloudformation-examples-ap-southeast-1"
            },
            "ap-northeast-1": {
                "Examples": "https://s3-ap-northeast-1.amazonaws.com/cloudformation-examples-ap-northeast-1"
            },
            "ap-northeast-2": {
                "Examples": "https://s3-ap-northeast-2.amazonaws.com/cloudformation-examples-ap-northeast-2"
            },
            "ap-northeast-3": {
                "Examples": "https://s3-ap-northeast-3.amazonaws.com/cloudformation-examples-ap-northeast-3"
            },
            "ap-southeast-2": {
                "Examples": "https://s3-ap-southeast-2.amazonaws.com/cloudformation-examples-ap-southeast-2"
            },
            "ap-south-1": {
                "Examples": "https://s3-ap-south-1.amazonaws.com/cloudformation-examples-ap-south-1"
            },
            "us-east-2": {
                "Examples": "https://s3-us-east-2.amazonaws.com/cloudformation-examples-us-east-2"
            },
            "ca-central-1": {
                "Examples": "https://s3-ca-central-1.amazonaws.com/cloudformation-examples-ca-central-1"
            },
            "sa-east-1": {
                "Examples": "https://s3-sa-east-1.amazonaws.com/cloudformation-examples-sa-east-1"
            },
            "cn-north-1": {
                "Examples": "https://s3.cn-north-1.amazonaws.com.cn/cloudformation-examples-cn-north-1"
            },
            "cn-northwest-1": {
                "Examples": "https://s3.cn-northwest-1.amazonaws.com.cn/cloudformation-examples-cn-northwest-1"
            }
        }
    },
    "Resources": {
        "SHVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": { "Ref": "AWS::StackId" }
                    },
                    {
                        "Key": "Name",
                        "Value": {"Fn::Sub": "${MasterStackName}-SHVPC"}
                    }
                ]
            }
        },
        "SHSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "SHVPC"
                },
                "CidrBlock": "10.0.0.0/24",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {"Ref": "AWS::StackId"}
                    },
                    {
                        "Key": "Name",
                        "Value": {"Fn::Sub": "${MasterStackName}-SHSubnet"}
                    }
                ]
            }
        },
        "SHInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {"Fn::Sub": "${MasterStackName}-SHInternetGateway"}
                    }
                ]
            }
        },
        "SHAttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "SHVPC"
                },
                "InternetGatewayId": {
                    "Ref": "SHInternetGateway"
                }
            }
        },
        "SHRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "SHVPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {"Fn::Sub": "${MasterStackName}-SHRouteTable"}
                    }
                ]
            }
        },
        "Route": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "SHAttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "SHRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "SHInternetGateway"
                }
            }
        },
        "SHSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SHSubnet"
                },
                "RouteTableId": {
                    "Ref": "SHRouteTable"
                }
            }
        },
        "SHNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "SHVPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {"Fn::Sub": "${MasterStackName}-SHNetworkAcl"}
                    }
                ]
            }
        },
        "SHInboundRDPNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "SHNetworkAcl"
                },
                "RuleNumber": "101",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "3389",
                    "To": "3389"
                }
            }
        },
        "SHInboundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "SHNetworkAcl"
                },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                }
            }
        },
        "SHOutBoundHttpPortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "SHNetworkAcl"
                },
                "RuleNumber": "90",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                }
            }
        },
        "SHOutBoundHttpsPortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "SHNetworkAcl"
                },
                "RuleNumber": "95",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                }
            }
        },
        "SHOutBoundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "SHNetworkAcl"
                },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                }
            }
        },
        "SHSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SHSubnet"
                },
                "NetworkAclId": {
                    "Ref": "SHNetworkAcl"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "38692dfb-ef2e-4a52-9868-ca7594675f61"
                }
            }
        },
        "SHIPAddress": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "SHAttachGateway",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "win1Instance"
                }
            }
        },
        "win1SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Simulated Host RDP Access",
                "VpcId": {
                    "Ref": "SHVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "win1Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-f3dcbc8b",
                "InstanceType": "t2.medium",
                "IamInstanceProfile": {
                    "Ref": "win1InstanceProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Windows Server 1 (",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    ")"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {"Fn::Sub": "${MasterStackName}-win1Instance"}
                    }
                ],
                "KeyName": {
                    "Ref": "EC2Key"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "30",
                            "DeleteOnTermination": "true",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "win1SecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "SHSubnet"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "echo function Shortcut >> %temp%\\format-disk2-download.ps1\n",
                                "echo { >> %temp%\\format-disk2-download.ps1\n",
                                "echo   param([string]$name, [string]$path) >> %temp%\\format-disk2-download.ps1\n",
                                "echo   $WshShell = New-Object -ComObject WScript.Shell >> %temp%\\format-disk2-download.ps1\n",
                                "echo   $Shortcut = $WshShell.CreateShortcut(\"$Home\\Desktop\\$name\") >> %temp%\\format-disk2-download.ps1\n",
                                "echo   $Shortcut.TargetPath = $path >> %temp%\\format-disk2-download.ps1\n",
                                "echo   $Shortcut.Save() >> %temp%\\format-disk2-download.ps1\n",
                                "echo } >> %temp%\\format-disk2-download.ps1\n",
                                "echo $client = new-object System.Net.WebClient >> %temp%\\format-disk2-download.ps1\n",
                                "echo $client.DownloadFile(\"https://s3.amazonaws.com/aws-cli/AWSCLI64.msi\",\"${env:temp}\\AWSCLI64.msi\") >> %temp%\\format-disk2-download.ps1\n",
                                "echo Start-Process -Wait -FilePath \"%temp%\\AWSCLI64.msi\" -ArgumentList /qb >> %temp%\\format-disk2-download.ps1\n",
                                "echo $client = new-object System.Net.WebClient >> %temp%\\format-disk2-download.ps1\n",
                                "echo $client.DownloadFile(\"https://download.mozilla.org/?product=firefox-latest&os=win&lang=en-US\",\"${env:temp}\\firefox.exe\") >> %temp%\\format-disk2-download.ps1\n",
                                "echo Start-Process -Wait -FilePath \"${env:TEMP}\\firefox.exe\" -ArgumentList \"-ms\" >> %temp%\\format-disk2-download.ps1\n",
                                "echo Shortcut \"Disk Management.lnk\" \"diskmgmt.msc\" >> %temp%\\format-disk2-download.ps1\n",
                                "echo Shortcut \"iSCSI Initiator.lnk\" \"iscsicpl.exe\" >> %temp%\\format-disk2-download.ps1\n",
                                "echo Get-Disk ^| Where partitionstyle -eq 'RAW' ^| Initialize-Disk -PartitionStyle MBR -PassThru ^| New-Partition -AssignDriveLetter -UseMaximumSize ^| Format-Volume -FileSystem NTFS -NewFileSystemLabel \"Data\" -Confirm:$false >> %temp%\\format-disk2-download.ps1\n",
                                "echo Read-S3Object -BucketName levvel-cloud-build-environment -KeyPrefix simhost-data -Folder d:\\ >> %temp%\\format-disk2-download.ps1\n",
                                "powershell -ExecutionPolicy Bypass -Command %temp%\\format-disk2-download.ps1\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "windowsDisk2Attach": {
            "Type": "AWS::EC2::VolumeAttachment",
            "Properties": {
                "Device": "/dev/xvdb",
                "InstanceId": {
                    "Ref": "win1Instance"
                },
                "VolumeId": {
                    "Ref": "windowsDisk2"
                }
            }
        },
        "windowsDisk2": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "win1Instance",
                        "AvailabilityZone"
                    ]
                },
                "Size": "1",
                "VolumeType": "gp2",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Windows Server 1 Disk 2 (",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    ")"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "win1InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "win1IamRole"
                    }
                ]
            }
        },
        "win1IamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            }
        },
        "win1RolePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Resource": [
                                "arn:aws:s3:::levvel-cloud-build-environment"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:DeleteObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::levvel-cloud-build-environment/*"
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "s3",
                "Roles": [
                    {
                        "Ref": "win1IamRole"
                    }
                ]
            }
        }
    },
    "Outputs": {
      "SHVPC" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHVPC" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHVPC" }}
      },
      "SHSubnet" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHSubnet" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHSubnet" }}
      },
      "SHInternetGateway" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHInternetGateway" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHInternetGateway" }}
      },
      "SHAttachGateway" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHAttachGateway" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHAttachGateway" }}
      },
      "SHRouteTable" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHRouteTable" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHRouteTable" }}
      },
      "Route" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "Route" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-Route" }}
      },
      "SHSubnetRouteTableAssociation" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHSubnetRouteTableAssociation" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHSubnetRouteTableAssociation" }}
      },
      "SHNetworkAcl" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHNetworkAcl" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHNetworkAcl" }}
      },
      "SHInboundRDPNetworkAclEntry" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHInboundRDPNetworkAclEntry" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHInboundRDPNetworkAclEntry" }}
      },
      "SHInboundResponsePortsNetworkAclEntry" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHInboundResponsePortsNetworkAclEntry" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHInboundResponsePortsNetworkAclEntry" }}
      },
      "SHOutBoundResponsePortsNetworkAclEntry" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHOutBoundResponsePortsNetworkAclEntry" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHOutBoundResponsePortsNetworkAclEntry" }}
      },
      "SHSubnetNetworkAclAssociation" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHSubnetNetworkAclAssociation" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHSubnetNetworkAclAssociation" }}
      },
      "SHIPAddress" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "SHIPAddress" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-SHIPAddress" }}
      },
      "win1SecurityGroup" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "win1SecurityGroup" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-win1SecurityGroup" }}
      },
      "win1Instance" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "win1Instance" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-win1Instance" }}
      },
      "windowsDisk2Attach" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "windowsDisk2Attach" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-windowsDisk2Attach" }}
      },
      "windowsDisk2" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "windowsDisk2" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-windowsDisk2" }}
      },
      "win1InstanceProfile" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "win1InstanceProfile" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-win1InstanceProfile" }}
      },
      "win1IamRole" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "win1IamRole" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-win1IamRole" }}
      },
      "win1RolePolicy" : {
        "Description" : "policy for the windows box",
        "Value" : { "Ref": "win1RolePolicy" },
        "Export" : { "Name" : { "Fn::Sub" : "${MasterStackName}-win1RolePolicy" }}
      }
    }
}
