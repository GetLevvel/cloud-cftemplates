{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Storage Gateway Server",
  "Parameters": {
    "MasterStackName": {
      "Description": "the stack name of the master stack",
      "Type": "String",
    },
    "SimHostSecurityGroup": {
      "Description": "SecurityGroup ID of the simulated hosted",
      "Type": "String"
    },
    "SimHostInstance": {
      "Description": "The sim host",
      "Type": "String"
    },
    "SimHostSubnet": {
      "Description": "Subnet",
      "Type": "String"
    },
    "SimHostVPC": {
      "Description": "VPC",
      "Type": "String"
    },
    "ActivationRegion": {
      "Description": "Region to activate gateway",
      "Type": "String"
    },
    "AmiLinux": {
      "Description": "Linux AMI",
      "Type": "String"
    }
  },
  "Resources": {
    "SGW1InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "SGW1Role"
        }]
      }
    },
    "SGW1Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Action": ["sts:AssumeRole"],
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            }
          }],
          "Version": "2012-10-17"
        }
      }
    },
    "SGW1RolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [{
              "Action": "storagegateway:*",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "ec2:DescribeNetworkInterfaces",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "ec2:CreateTags",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "SGW1RolePolicy",
        "Roles": [{
          "Ref": "SGW1Role"
        }]
      }
    },
    "SGW1SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Sub": "SimHostVPC"
        },
        "GroupDescription": "Hybrid Workshop - Gateway 1 Access All Ports",
        "SecurityGroupIngress": [{
            "FromPort": "0",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Sub": "SimHostSecurityGroup"
            },
            "ToPort": "65535"
          },
          {
            "FromPort": "0",
            "IpProtocol": "udp",
            "SourceSecurityGroupId": {
              "Sub": "SimHostSecurityGroup"
            },
            "ToPort": "65535"
          },
          {
            "FromPort": "-1",
            "IpProtocol": "icmp",
            "SourceSecurityGroupId": {
              "Sub": "SimHostSecurityGroup"
            },
            "ToPort": "-1"
          }
        ]
      }
    },
    "SGW1Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "Tags": [{
          "Key": "Name",
          "Value": {
            "Fn::Join": ["", ["Gateway Server 1 (", {
              "Ref": "AWS::StackName"
            }, ")"]]
          }
        }],
        "InstanceType": {
          "Ref": "type"
        },
        "IamInstanceProfile": {
          "Ref": "SGW1InstanceProfile"
        },
        "InstanceInitiatedShutdownBehavior": "terminate",
        "ImageId": "ami-e110db98",
        "NetworkInterfaces": [{
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "GroupSet": [{
            "Ref": "SGW1SecurityGroup"
          }],
          "SubnetId": {
            "Sub": "SimHostSubnet"
          }
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/bash\n",
                "echo clear log > /var/log/cloud-init-output.log\n",
                "pip install --upgrade awscli &> /tmp/pip\n",
                "/usr/local/bin/aws configure set default.region ", {
                  "Ref": "AWS::Region"
                }, "\n",
                "instance=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                "ip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "echo $ip\n",
                "name=Hybrid-Workshop-Gateway-Server-1-${instance}\n",
                "gwMode=CACHED\n",
                "region=", {
                  "Ref": "ActivationRegion"
                }, "\n",
                "complete=0\n",
                "count=1\n",

                "while [ $complete != 4 -a $count != 30 ]; do\n",
                " if [ $count -ne 1 ]; then\n",
                "  sleep 15\n",
                " fi\n",

                "  if [ $complete -eq 0 ]; then\n",
                "   code=$(echo -e \"GET ?gatewayType=${gwMode}&activationRegion=${region} HTTP/1.1\\n\\n\" | nc localhost 8080 | grep -oP 'activationKey=([\\w-]+)' | cut -f2 -d=)\n",
                "   if [[ $code != \"\" ]]; then\n",
                "    gatewayarn=$(/usr/local/bin/aws storagegateway activate-gateway --activation-key ${code} --gateway-name ${name} --gateway-timezone GMT --gateway-type ${gwMode} --gateway-region ${region} --region ${region} --output text)\n",
                "    if [ $? -eq 0 ]; then complete=1; echo ${gatewayarn}; fi\n",
                "   fi\n",
                "  fi\n",

                "  if [ $complete -eq 1 ]; then\n",
                "   disks=$(/usr/local/bin/aws storagegateway list-local-disks --gateway-arn ${gatewayarn} --region ${region} --output text)\n",
                "   disks=$(echo \"$disks\"| awk '{print $4}')\n",
                "   diskarray=($disks)\n",
                "   /usr/local/bin/aws storagegateway add-cache --gateway-arn ${gatewayarn} --disk-ids --region ${region} ${diskarray[0]}\n",
                "   if [ $? -eq 0 ]; then complete=2; fi\n",
                "  fi\n",

                "  if [ $complete -eq 2 ]; then\n",
                "   /usr/local/bin/aws storagegateway add-upload-buffer --gateway-arn ${gatewayarn} --disk-ids ${diskarray[1]} --region ${region}\n",
                "   if [ $? -eq 0 ]; then complete=3; fi\n",
                "  fi\n",

                "  if [ $complete -eq 3 ]; then\n",
                "   sizebytes=$((1024*1024*1024*))\n",
                "   /usr/local/bin/aws storagegateway create-cached-iscsi-volume --gateway-arn ${gatewayarn} --volume-size-in-bytes ${sizebytes} --target-name frankfurt-vol-1 --network-interface-id ${ip} --client-token iscsi --region ${region}\n",
                "   if [ $? -eq 0 ]; then complete=4; fi\n",
                "  fi\n",

                " count=$((count+1))\n",
                "done\n",

                "if [ $complete -eq 4 ]; then\n",
                " /usr/local/bin/aws ec2 create-tags --resources ${instance} --tags \"Key=Name,Value=", "Hybrid Workshop - Migrate - Gateway Server 1 (Activated) - (", {
                  "Ref": "AWS::StackName"
                }, ")\"\n",
                "else\n",
                " /usr/local/bin/aws ec2 create-tags --resources ${instance} --tags \"Key=Name,Value=", "Hybrid Workshop - Migrate - Gateway Server 1 (FAILED ACTIVATION) - (", {
                  "Ref": "AWS::StackName"
                }, ")\"\n",
                "fi\n",
                "echo finished\n",
                "cat /var/log/cloud-init-output.log >> /tmp/message\n"
              ]
            ]
          }
        }
      }
    },
    "gwdisk2attach": {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "Device": "/dev/sdc",
        "InstanceId": {
          "Ref": "SGW1Instance"
        },
        "VolumeId": {
          "Ref": "gwdisk2"
        }
      }
    },
    "gwdisk2": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": {
          "Fn::GetAtt": ["SGW1Instance", "AvailabilityZone"]
        },
        "Size": {
          "Ref": "uploadBufferSize"
        },
        "VolumeType": "gp2",
        "Tags": [{
          "Key": "Name",
          "Value": {
            "Fn::Join": ["", ["Gateway Server 1 - EBS 2 - Upload Buffer (", {
              "Ref": "AWS::StackName"
            }, ")"]]
          }
        }],
      }
    },
    "gwdisk3attach": {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "Device": "/dev/sdd",
        "InstanceId": {
          "Ref": "SGW1Instance"
        },
        "VolumeId": {
          "Ref": "gwdisk3"
        }
      }
    },
    "gwdisk3": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": {
          "Fn::GetAtt": ["SGW1Instance", "AvailabilityZone"]
        },
        "Size": {
          "Ref": "cacheSize"
        },
        "VolumeType": "gp2",
        "Tags": [{
          "Key": "Name",
          "Value": {
            "Fn::Join": ["", ["Gateway Server 1 - EBS 3 - Cache (", {
              "Ref": "AWS::StackName"
            }, ")"]]
          }
        }],
      }
    }
  },
  "Outputs": {}
}
